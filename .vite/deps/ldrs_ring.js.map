{
  "version": 3,
  "sources": ["../../node_modules/ldrs/temp-ts-out/elements/ring.js", "../../node_modules/ldrs/temp-ts-out/auto/ring.js"],
  "sourcesContent": ["import Base from '../lib/LdrsBaseElement.js';\nimport styles from './ring.scss';\nclass Ring extends Base {\n    _attributes = ['size', 'color', 'speed', 'stroke', 'bg-opacity'];\n    size;\n    color;\n    speed;\n    stroke;\n    'bg-opacity';\n    static get observedAttributes() {\n        return ['size', 'color', 'stroke', 'speed', 'bg-opacity'];\n    }\n    constructor() {\n        super();\n        this.storePropsToUpgrade(this._attributes);\n        this.reflect(this._attributes);\n    }\n    connectedCallback() {\n        this.upgradeStoredProps();\n        this.applyDefaultProps({\n            size: 40,\n            color: 'black',\n            stroke: 5,\n            speed: 2,\n            'bg-opacity': 0,\n        });\n        const sizeInt = parseInt(this.size);\n        const strokeInt = parseInt(this.stroke);\n        const centerPoint = sizeInt / 2;\n        const radius = Math.max(0, sizeInt / 2 - strokeInt / 2);\n        this.template.innerHTML = `\n      <svg\n        class=\"container\"\n        viewBox=\"0 0 ${this.size} ${this.size}\"\n        height=\"${this.size}\"\n        width=\"${this.size}\"\n      >\n        <circle \n          class=\"track\"\n          cx=\"${centerPoint}\" \n          cy=\"${centerPoint}\" \n          r=\"${radius}\" \n          pathlength=\"100\" \n          stroke-width=\"${this.stroke}px\" \n          fill=\"none\" \n        />\n        <circle \n          class=\"car\"\n          cx=\"${centerPoint}\" \n          cy=\"${centerPoint}\" \n          r=\"${radius}\" \n          pathlength=\"100\" \n          stroke-width=\"${this.stroke}px\" \n          fill=\"none\" \n        />\n      </svg>\n      <style>\n        :host{\n          --uib-size: ${this.size}px;\n          --uib-color: ${this.color};\n          --uib-speed: ${this.speed}s;\n          --uib-bg-opacity: ${this['bg-opacity']};\n        }\n        ${styles}\n      </style>\n    `;\n        this.shadow.replaceChildren(this.template.content.cloneNode(true));\n    }\n    attributeChangedCallback() {\n        const styleEl = this.shadow.querySelector('style');\n        const svgEl = this.shadow.querySelector('svg');\n        const circleEls = this.shadow.querySelectorAll('circle');\n        if (!styleEl)\n            return;\n        const sizeInt = parseInt(this.size);\n        const strokeInt = parseInt(this.stroke);\n        const centerPoint = String(sizeInt / 2);\n        const radius = String(Math.max(0, sizeInt / 2 - strokeInt / 2));\n        svgEl.setAttribute('height', this.stroke);\n        svgEl.setAttribute('width', this.stroke);\n        svgEl.setAttribute('viewBox', `0 0 ${sizeInt} ${sizeInt}`);\n        circleEls.forEach((circleEl) => {\n            circleEl.setAttribute('cx', centerPoint);\n            circleEl.setAttribute('cy', centerPoint);\n            circleEl.setAttribute('r', radius);\n            circleEl.setAttribute('stroke-width', this.stroke);\n        });\n        styleEl.innerHTML = `\n      :host{\n        --uib-size: ${sizeInt}px;\n        --uib-color: ${this.color};\n        --uib-speed: ${this.speed}s;\n        --uib-bg-opacity: ${this['bg-opacity']};\n      }\n      ${styles}\n    `;\n    }\n}\nexport default {\n    register: (name = 'l-ring') => {\n        if (!customElements.get(name)) {\n            customElements.define(name, class extends Ring {\n            });\n        }\n    },\n    element: Ring,\n};\n", "import ring from '../elements/ring.js';\nring.register();\n"],
  "mappings": ";;;;;;;;;AAEA,IAAMA,IAAN,cAAmBC,EAAAA;EAUfC,cAAAA;AACIC,UAAAA;AAVJC,uCAAc,CAAC,QAAQ,SAAS,SAAS,UAAU,YAAA;AACnDC;AACAC;AACAC;AACAC;AACA;AAMIC,SAAKC,oBAAoBD,KAAKL,WAAAA,GAC9BK,KAAKE,QAAQF,KAAKL,WAAAA;EACrB;EAPUQ,WAAAA,qBAAAA;AACP,WAAO,CAAC,QAAQ,SAAS,UAAU,SAAS,YAAA;EAC/C;EAMDC,oBAAAA;AACIJ,SAAKK,mBAAAA,GACLL,KAAKM,kBAAkB,EACnBV,MAAM,IACNC,OAAO,SACPE,QAAQ,GACRD,OAAO,GACP,cAAc,EAAA,CAAA;AAElB,UAAMS,KAAUC,SAASR,KAAKJ,IAAAA,GACxBa,KAAYD,SAASR,KAAKD,MAAAA,GAC1BW,KAAcH,KAAU,GACxBI,IAASC,KAAKC,IAAI,GAAGN,KAAU,IAAIE,KAAY,CAAA;AACrDT,SAAKc,SAASC,YAAY;;;uBAGXf,KAAKJ,IAAAA,IAAQI,KAAKJ,IAAAA;kBACvBI,KAAKJ,IAAAA;iBACNI,KAAKJ,IAAAA;;;;gBAINc,EAAAA;gBACAA,EAAAA;eACDC,CAAAA;;0BAEWX,KAAKD,MAAAA;;;;;gBAKfW,EAAAA;gBACAA,EAAAA;eACDC,CAAAA;;0BAEWX,KAAKD,MAAAA;;;;;;wBAMPC,KAAKJ,IAAAA;yBACJI,KAAKH,KAAAA;yBACLG,KAAKF,KAAAA;8BACAE,KAAK,YAAA,CAAA;;UAEzBgB,CAAAA;;OAGFhB,KAAKiB,OAAOC,gBAAgBlB,KAAKc,SAASK,QAAQC,UAAAA,IAAU,CAAA;EAC/D;EACDC,2BAAAA;AACI,UAAMC,KAAUtB,KAAKiB,OAAOM,cAAc,OAAA,GACpCC,KAAQxB,KAAKiB,OAAOM,cAAc,KAAA,GAClCE,KAAYzB,KAAKiB,OAAOS,iBAAiB,QAAA;AAC/C,QAAA,CAAKJ;AACD;AACJ,UAAMf,IAAUC,SAASR,KAAKJ,IAAAA,GACxBa,IAAYD,SAASR,KAAKD,MAAAA,GAC1BW,IAAciB,OAAOpB,IAAU,CAAA,GAC/BI,IAASgB,OAAOf,KAAKC,IAAI,GAAGN,IAAU,IAAIE,IAAY,CAAA,CAAA;AAC5De,IAAAA,GAAMI,aAAa,UAAU5B,KAAKD,MAAAA,GAClCyB,GAAMI,aAAa,SAAS5B,KAAKD,MAAAA,GACjCyB,GAAMI,aAAa,WAAW,OAAOrB,CAAAA,IAAWA,CAAAA,EAAAA,GAChDkB,GAAUI,QAASC,CAAAA,OAAAA;AACfA,MAAAA,GAASF,aAAa,MAAMlB,CAAAA,GAC5BoB,GAASF,aAAa,MAAMlB,CAAAA,GAC5BoB,GAASF,aAAa,KAAKjB,CAAAA,GAC3BmB,GAASF,aAAa,gBAAgB5B,KAAKD,MAAAA;IAAO,CAAA,GAEtDuB,GAAQP,YAAY;;sBAENR,CAAAA;uBACCP,KAAKH,KAAAA;uBACLG,KAAKF,KAAAA;4BACAE,KAAK,YAAA,CAAA;;QAEzBgB,CAAAA;;EAEH;AAAA;AAEL,IAAee,IAAA,EACXC,UAAU,CAACC,KAAO,aAAA;AACTC,iBAAeC,IAAIF,EAAAA,KACpBC,eAAeE,OAAOH,IAAM,cAAc1C,EAAAA;EAAAA,CAAAA;AAE7C,GAEL8C,SAAS9C,EAAAA;;;ACxGb+C,EAAKC,SAAAA;",
  "names": ["Ring", "Base", "constructor", "super", "_attributes", "size", "color", "speed", "stroke", "this", "storePropsToUpgrade", "reflect", "observedAttributes", "connectedCallback", "upgradeStoredProps", "applyDefaultProps", "sizeInt", "parseInt", "strokeInt", "centerPoint", "radius", "Math", "max", "template", "innerHTML", "styles", "shadow", "replaceChildren", "content", "cloneNode", "attributeChangedCallback", "styleEl", "querySelector", "svgEl", "circleEls", "querySelectorAll", "String", "setAttribute", "forEach", "circleEl", "ring", "register", "name", "customElements", "get", "define", "element", "ring", "register"]
}
